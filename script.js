const API_KEY = "ddb4e3c410ddf97dce05edfb8fee1856"; // üîÅ ‡πÉ‡∏™‡πà API Key ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å openweathermap

// ‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î
function showMode(mode) {
  document.getElementById("classicMode").style.display = mode === "classic" ? "block" : "none";
  document.getElementById("chatMode").style.display = mode === "chat" ? "block" : "none";
}

// ------------------ ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏î‡∏¥‡∏° ------------------
function getWeatherClassic() {
  const city = document.getElementById("cityInput").value.trim();
  if (!city) return;
  fetchWeather(city, (text) => {
    document.getElementById("weatherResult").innerText = text;
  });
}

// ------------------ ‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏ä‡∏ó ------------------
function handleChat() {
  const input = document.getElementById("chatInput");
  const city = input.value.trim();
  if (!city) return;
  addChatMessage(city, "user");
  input.value = "";
  fetchWeather(city, (reply) => {
    addChatMessage(reply, "bot");
  });
}

function addChatMessage(text, sender = "bot") {
  const box = document.getElementById("chatBox");
  const div = document.createElement("div");
  div.className = `msg ${sender}`;
  div.textContent = text;
  box.appendChild(div);
  box.scrollTop = box.scrollHeight;
}

// ------------------ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ------------------
function fetchWeather(city, callback) {
  fetch(
    `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric&lang=th`
  )
    .then((res) => res.json())
    .then((data) => {
      if (data.cod !== 200) {
        callback("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ô‡∏µ‡πâ");
        return;
      }

      const reply = `
       üìç ${data.name}
       üå§Ô∏è ${data.weather[0].description}
       üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${data.main.temp} ¬∞C
       üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${data.main.humidity}%
       üí® ‡∏•‡∏°: ${data.wind.speed} km/h
    `.trim();

    callback(reply);
  })
  .catch(() => {
    callback("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠");
  });
}

  // üî§ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
  const hint = document.getElementById('layerHint');
  switch (type) {
    case 'precipitation_new':
      hint.textContent = "‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏ù‡∏ô‡∏ï‡∏≤‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà";
      break;
    case 'clouds_new':
      hint.textContent = "‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏Ü";
      break;
    case 'temp_new':
      hint.textContent = "‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ú‡∏¥‡∏ß‡∏ó‡∏±‡πà‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®";
      break;
    case 'wind_new':
      hint.textContent = "‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏•‡∏°";
      break;
    default:
      hint.textContent = "";

function changeLayer(type) {
  if (weatherLayer) {
    map.removeLayer(weatherLayer);
  }
  weatherLayer = L.tileLayer(`https://tile.openweathermap.org/map/${type}/{z}/{x}/{y}.png?appid=${apiKey}`, {
    attribution: 'Weather data ¬© OpenWeatherMap',
    opacity: 0.6
  });
  weatherLayer.addTo(map);

  }
}